generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Core user model. Added inverse relations for drivers and transactions.
model User {
  id            String        @id @default(uuid())
  avatar        String?
  email         String        @unique
  gender        String?
  fullName      String?
  phone         String?
  dob           DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  password      String?
  nationality   String?
  activityLevel String?
  goals         String?
  height        Float?
  weight        Float?
  dietProfile   String[]      @default([])
  roles         String[]      @default([])
  address       Json?
  cart          Cart?
  drivenOrders  Order[]       @relation("DriverOrders")
  orders        Order[]
  plans         Plan[]
  reviews       Review[]
  transactions  Transaction[]
  resetToken      String?
  resetTokenExpiry DateTime?
}

/// Cart and items (one cart per user - userId is unique).
model Cart {
  id             String     @id @default(uuid())
  userId         String?    @unique
  estimatedPrice Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User?      @relation(fields: [userId], references: [id])
  items          CartItem[]
}

/// Product model for ecommerce food items.
///   orderItems changed to array (many OrderItem per Product).
model Product {
  id           String      @id @default(uuid())
  name         String
  description  String?
  details      String?
  price        Float
  discount     Float?
  stock        Int         @default(0)
  deliveryTime String?
  photo        String?
  photos       String[]    @default([])
  category     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]
  Product_A    Product[]   @relation("RelatedProducts")
  Product_B    Product[]   @relation("RelatedProducts")
}

/// S3File can reference a media item at the S3 storage.
model S3File {
  id        String   @id @default(uuid())
  objectKey String
  fileUrl   String
  createdAt DateTime @default(now())
}

/// CartItem can reference a product OR a plan (polymorphic-like).
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String?
  quantity  Int      @default(1)
  plan      Json?
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

/// Reviews left by users on products.
model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

/// Plan - subscription / meal plans; relation to user
model Plan {
  id             String    @id @default(uuid())
  userId         String?
  status         String?   @default("active")
  estimatedPrice Float?
  type           String?
  noMeals        Int?
  noDays         Int?
  specifyDays    String[]  @default([])
  startDate      DateTime?
  expiryDate     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(fields: [userId], references: [id])
}

/// Meals (menu items) with flexible ingredients and macros stored as JSON
model Meal {
  id          String      @id @default(uuid())
  name        String?
  description String?
  type        String?
  available   Boolean     @default(true)
  stock       Int?
  ingredients Json?
  macros      Json?
  photo       String?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  price       Float?      @default(0)
  orderItems  OrderItem[]
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  driverId        String?
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  deliveryAddress Json?
  deliveryEta     String?
  subtotal        Float
  deliveryFee     Float?
  total           Float
  note            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cancelDate      DateTime?
  cancelReason    String?
  driver          User?         @relation("DriverOrders", fields: [driverId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  transactions    Transaction[]
}

/// OrderItem stores a snapshot of name/price at time of purchase.
///   productId and mealId are optional; include product/meal back-relations on those models.
model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String?
  mealId     String?
  name       String?
  unitPrice  Float
  quantity   Int      @default(1)
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  meal       Meal?    @relation(fields: [mealId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
}

/// Transactions (payments / receipts). Many transactions can reference one order;
///   many transactions can reference one user.
model Transaction {
  id        String   @id @default(uuid())
  userId    String?
  orderId   String?
  amount    Float
  currency  String   @default("USD")
  method    String?
  status    String?
  receipt   Json?
  refunded  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order?   @relation(fields: [orderId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

/// Orders and items. OrderItem can reference a Product or a Meal.
///   Order.driver links to User via the "DriverOrders" relation declared on User.
enum OrderStatus {
  PENDING
  PREPARING
  READY
  PICKED_UP
  EN_ROUTE
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
